You can connect signals to themselves whilst also being connected to another node. This is good for the Single Responsibility design principle as scripts are
only doing one thing.
    - E.g. You can have a text field signal upwards that the text has been entered whilst also signaling to yourself that you want to clear the text field.

When you need to get refferences to child nodes via variables (onready var = $...) ask yourself how many times you need to use that variable, if you don't need
to use them that often not create the variables and instead use a function to change the child nodes.

Formatted strings are pretty broken, useful for when trying to return text with certain words that only variables carry.
    - E.g. "Stats: Health: %i Race %s" [health, race]

Initialise function when you want a child node to do something in this case initialisation, this is part of the Single Responsibility design principle, so
children nodes don't need to signal up a lot of times.

PoolStringArray array built for strings and very memory efficent
    - var List = PoolStringArray([
        "You are now in: " + new_room.room_name + ". It is " + new_room.room_description,
		"Exits: "
    ]).join("\n")
    - var exit_string = PoolStringArray(new_room.exits.keys()).join(" ")

Tool scripts: to create a tool script add "tool" to they very start of the script. This means that this script will run in the editor, which means if you have
lifecycle scripts like func _ready() or func _physics_process() it will on the editor, therefore, you only want to use tool when you have functions that are not
called on that script so it's logic rather than code flow.

If you are creating a script that you will not put intothe scene tree don't make it extend from Node, if it's a resource you can make it extend from Resource.

Optional parameters in functions, you just need to set the parameter a default value and then when you call the function just put the name of the variable so
it just gets passed.
    - func connect_exit_locked(direction: String, room, room_2_override = "null"):
        _connect_exit(direction, room, true, room_2_override)

If you want quotation marks placed inside quotation marks use \"
    E.g. return npc.npc_name + ": \"" + npc.initial_dialogue + "\""

Can a variable is this value but if another value is this value the original variable changes, use of one like if else statement
    - E.g. var dialogue = npc.post_quest_dialogue if npc.has_quest_item_received else npc.initial_dialogue

Duck typing in Godot use the "in" keyword to check if this property exists, so it will tell us if it's a class without doing a check on it's data type
    - E.g. if "is_locked" in reward:

When debugging you can hover onready variable on the script and it will tell you if it's null or not

BBCode is from RichTextLabel which basically let's you use CSS on words to colour them etc. You need to enable this in the inspect to get it working.  